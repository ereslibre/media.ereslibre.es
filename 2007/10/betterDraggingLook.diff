Index: src/gui/itemviews/qabstractitemview.cpp
===================================================================
--- src/gui/itemviews/qabstractitemview.cpp	(revisiÃ³n: 721319)
+++ src/gui/itemviews/qabstractitemview.cpp	(copia de trabajo)
@@ -3628,20 +3628,21 @@ bool QAbstractItemViewPrivate::openEdito
 QPixmap QAbstractItemViewPrivate::renderToPixmap(const QModelIndexList &indexes, QRect *r) const
 {
     Q_Q(const QAbstractItemView);
-    QRect rect = q->visualRect(indexes.at(0));
-    QList<QRect> rects;
-    for (int i = 0; i < indexes.count(); ++i) {
-        rects.append(q->visualRect(indexes.at(i)));
-        rect |= rects.at(i);
-    }
-    rect = rect.intersected(viewport->rect());
+    QRect itemRect = q->visualRect(q->selectionModel()->currentIndex());
+    QRect rect(itemRect);
+    rect.setSize(QSize(rect.width() + itemRect.height() * (indexes.count() - 1),
+                       rect.height() + itemRect.height() * (indexes.count() - 1)));
+
     QPixmap pixmap(rect.size());
-    pixmap.fill(q->palette().base().color());
+    pixmap.fill(Qt::transparent);
     QPainter painter(&pixmap);
     QStyleOptionViewItemV3 option = viewOptionsV3();
     option.state |= QStyle::State_Selected;
     for (int j = 0; j < indexes.count(); ++j) {
-        option.rect = QRect(rects.at(j).topLeft() - rect.topLeft(), rects.at(j).size());
+        option.rect = QRect(rect.width() - itemRect.width() - itemRect.height() * j,
+                            itemRect.height() * j,
+                            itemRect.width(),
+                            itemRect.height());
         delegateForIndex(indexes.at(j))->paint(&painter, option, indexes.at(j));
     }
     painter.end();
