Index: kdeui/CMakeLists.txt
===================================================================
--- kdeui/CMakeLists.txt	(revisión: 731485)
+++ kdeui/CMakeLists.txt	(copia de trabajo)
@@ -13,6 +13,7 @@ include_directories(
  ${CMAKE_CURRENT_SOURCE_DIR}/dialogs
  ${CMAKE_CURRENT_SOURCE_DIR}/findreplace
  ${CMAKE_CURRENT_SOURCE_DIR}/fonts
+ ${CMAKE_CURRENT_SOURCE_DIR}/goya
  ${CMAKE_CURRENT_SOURCE_DIR}/icons
  ${CMAKE_CURRENT_SOURCE_DIR}/itemviews
  ${CMAKE_CURRENT_SOURCE_DIR}/jobs
@@ -28,6 +29,7 @@ include_directories(
 )
 
 add_subdirectory( about )
+add_subdirectory( goya )
 add_subdirectory( tests )
 add_subdirectory( sonnet/tests )
 
@@ -88,6 +90,7 @@ set(kdeui_LIB_SRCS
  fonts/kfontchooser.cpp
  fonts/kfontdialog.cpp
  fonts/kfontrequester.cpp
+ goya/goya.cpp
  icons/kiconeffect.cpp
  icons/kiconengine.cpp
  icons/kicon.cpp
@@ -347,6 +350,7 @@ install( FILES
  fonts/kfontchooser.h
  fonts/kfontdialog.h
  fonts/kfontrequester.h
+ goya/goya.h
  icons/kiconeffect.h
  icons/kicon.h
  icons/k3icon_p.h      # we install the private header as it is needed by kcm (tokoe)
Index: kdeui/goya/goya.cpp
===================================================================
--- kdeui/goya/goya.cpp	(revisión: 0)
+++ kdeui/goya/goya.cpp	(revisión: 0)
@@ -0,0 +1,380 @@
+/**
+  * This file is part of the KDE project
+  * Copyright (C) 2007 Rafael Fernández López <ereslibre@kde.org>
+  *
+  * This library is free software; you can redistribute it and/or
+  * modify it under the terms of the GNU Library General Public
+  * License as published by the Free Software Foundation; either
+  * version 2 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful,
+  * but WITHOUT ANY WARRANTY; without even the implied warranty of
+  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+  * Library General Public License for more details.
+  *
+  * You should have received a copy of the GNU Library General Public License
+  * along with this library; see the file COPYING.LIB.  If not, write to
+  * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+  * Boston, MA 02110-1301, USA.
+  */
+
+#include "goya.h"
+
+#include <QIcon>
+#include <QSize>
+#include <QStyle>
+#include <QCursor>
+#include <QStyleOption>
+#include <QAbstractItemView>
+#include <QStyleOptionButton>
+#include <QStyleOptionViewItem>
+
+#include <kapplication.h>
+#include <kdebug.h>
+
+namespace Goya
+{
+
+
+class Widget::Private
+{
+public:
+    Private(Widget *q);
+    ~Private();
+
+    const QAbstractItemView *itemView;
+
+    QRectF rect;
+    bool eatEvents;
+
+    Widget *q;
+};
+
+Widget::Private::Private(Widget *q)
+    : itemView(0)
+    , eatEvents(false)
+    , q(q)
+{
+}
+
+Widget::Private::~Private()
+{
+}
+
+
+Widget::Widget(QObject *parent)
+    : QObject(parent)
+    , d(new Private(this))
+{
+}
+
+Widget::~Widget()
+{
+    delete d;
+}
+
+bool Widget::eatEvents() const
+{
+    return d->eatEvents;
+}
+
+void Widget::setEatEvents(bool eatEvents)
+{
+    d->eatEvents = eatEvents;
+}
+
+QRectF Widget::rect() const
+{
+    return d->rect;
+}
+
+void Widget::setRect(const QRectF &rect)
+{
+    d->rect = rect;
+}
+
+const QAbstractItemView *Widget::itemView() const
+{
+    return d->itemView;
+}
+
+
+class PushButton::Private
+{
+public:
+    Private(PushButton *q);
+    ~Private();
+
+    void emitClicked(const QModelIndex &index);
+
+    QString text;
+    QIcon icon;
+    QSize iconSize;
+
+    PushButton *q;
+};
+
+PushButton::Private::Private(PushButton *q)
+    : q(q)
+{
+}
+
+PushButton::Private::~Private()
+{
+}
+
+void PushButton::Private::emitClicked(const QModelIndex &index)
+{
+    emit q->clicked(index);
+}
+
+
+PushButton::PushButton(QObject *parent)
+    : Widget(parent)
+    , d(new Private(this))
+{
+}
+
+PushButton::~PushButton()
+{
+    delete d;
+}
+
+QString &PushButton::text() const
+{
+    return d->text;
+}
+
+void PushButton::setText(const QString &text)
+{
+    d->text = text;
+}
+
+QIcon &PushButton::icon() const
+{
+    return d->icon;
+}
+
+void PushButton::setIcon(const QIcon &icon)
+{
+    d->icon = icon;
+}
+
+QSize &PushButton::iconSize() const
+{
+    return d->iconSize;
+}
+
+void PushButton::setIconSize(const QSize &iconSize)
+{
+    d->iconSize = iconSize;
+}
+
+void PushButton::paint(const QStyleOption *option, QPainter *painter) const
+{
+    const QStyleOptionButton *optionButton =
+                           qstyleoption_cast<const QStyleOptionButton*>(option);
+
+    Q_ASSERT(optionButton);
+
+    QStyleOptionButton opt(*optionButton);
+
+    // FIXME !! change this when finishing porting qtapp => kdeapp
+    //QStyle *style = kapp->style();
+    QStyle *style = QApplication::style();
+
+    Q_ASSERT(itemView());
+    Q_ASSERT(itemView()->viewport());
+    Q_ASSERT(style);
+
+    if (itemView() && itemView()->viewport() && optionButton && style)
+    {
+        opt.state &= ~QStyle::State_HasFocus;
+        opt.state &= ~QStyle::State_MouseOver;
+
+        if (opt.rect.contains(itemView()->viewport()->mapFromGlobal(QCursor::pos())))
+        {
+            opt.state |= QStyle::State_MouseOver;
+        }
+
+        style->drawControl(QStyle::CE_PushButton, &opt, painter);
+    }
+}
+
+
+class Canvas::Private
+{
+public:
+    Private(Canvas *q);
+    ~Private();
+
+    void paintIndex(const QModelIndex &index, QPainter *painter) const;
+
+    QAbstractItemView *itemView;
+
+    bool mouseButtonDown;
+
+    Canvas *q;
+};
+
+Canvas::Private::Private(Canvas *q)
+    : itemView(0)
+    , mouseButtonDown(false)
+    , q(q)
+{
+}
+
+Canvas::Private::~Private()
+{
+}
+
+
+
+Canvas::Canvas(QAbstractItemView *itemView, QObject *parent)
+    : QAbstractItemDelegate(parent)
+    , d(new Private(this))
+{
+    itemView->setMouseTracking(true);
+
+    d->itemView = itemView;
+
+    itemView->viewport()->installEventFilter(this); // mouse events
+    itemView->installEventFilter(this);             // keyboard events
+}
+
+Canvas::~Canvas()
+{
+    delete d;
+}
+
+void Canvas::paint(QPainter *painter, const QStyleOptionViewItem &option,
+                   const QModelIndex &index) const
+{
+    QList<Widget*> widgetList = qvariant_cast<QList<Widget*> >(index.model()->data(index, WidgetRole));
+    QList<QStyleOption*> optionList = qvariant_cast<QList<QStyleOption*> >(index.model()->data(index, WidgetStyleRole));
+
+    const QStyleOptionViewItemV3 *optionV3 = qstyleoption_cast<const QStyleOptionViewItemV3*>(&option);
+
+    int j = 0;
+    foreach (Widget *widget, widgetList)
+    {
+        QStyleOption *opt = optionList[j];
+        opt->rect.setTop(option.rect.top() + opt->rect.top());
+        opt->rect.setBottom(option.rect.top() + opt->rect.bottom());
+        opt->rect.setLeft(option.rect.left() + opt->rect.left());
+        opt->rect.setRight(option.rect.left() + opt->rect.right());
+
+        if (opt->rect.contains(d->itemView->viewport()->mapFromGlobal(QCursor::pos())) &&
+            d->mouseButtonDown)
+        {
+            opt->state |= QStyle::State_Sunken;
+        }
+
+        widget->d->itemView = static_cast<const QAbstractItemView*>(optionV3->widget);
+        widget->paint(opt, painter);
+        widget->d->itemView = 0;
+
+        j++;
+    }
+}
+
+bool Canvas::eventFilter(QObject *watched, QEvent *event)
+{
+    /*if (event->type() == QEvent::MouseMove)
+    {
+        if (QWidget *viewport = qobject_cast<QWidget*>(watched))
+        {
+            viewport->update();
+
+            QAbstractItemView *listView = dynamic_cast<QAbstractItemView*>(viewport->parent());
+            if (!listView) // the keyboard event comes directly from the view, not the viewport
+                listView = dynamic_cast<QAbstractItemView*>(viewport);
+        }
+    }
+    else if (event->type() == QEvent::Leave)
+    {
+        if (QWidget *viewport = qobject_cast<QWidget*>(watched))
+        {
+            viewport->update();
+        }
+    }*/
+
+    QWidget *viewport = qobject_cast<QWidget*>(watched);
+    viewport->update();
+
+    if (event->type() == QEvent::MouseButtonPress)
+    {
+        d->mouseButtonDown = true;
+
+        QModelIndex currentIndex = d->itemView->indexAt(viewport->mapFromGlobal(QCursor::pos()));
+
+        if (currentIndex.isValid())
+        {
+            QList<Widget*> widgetList = qvariant_cast<QList<Widget*> >(currentIndex.model()->data(currentIndex, WidgetRole));
+            QList<QStyleOption*> optionList = qvariant_cast<QList<QStyleOption*> >(currentIndex.model()->data(currentIndex, WidgetStyleRole));
+
+            QRect origRect = d->itemView->visualRect(currentIndex);
+
+            int i = 0;
+            foreach (Widget *widget, widgetList)
+            {
+                QStyleOption *opt = optionList[i];
+                opt->rect.setTop(opt->rect.top() + origRect.top());
+                opt->rect.setBottom(opt->rect.bottom() + origRect.top());
+                opt->rect.setLeft(opt->rect.left() + origRect.left());
+                opt->rect.setRight(opt->rect.right() + origRect.left());
+
+                if (opt->rect.contains(viewport->mapFromGlobal(QCursor::pos())) &&
+                    widget->eatEvents())
+                {
+                    return true;
+                }
+
+                i++;
+            }
+        }
+    }
+    else if (event->type() == QEvent::MouseButtonRelease)
+    {
+        d->mouseButtonDown = false;
+
+        QModelIndex currentIndex = d->itemView->indexAt(viewport->mapFromGlobal(QCursor::pos()));
+
+        if (currentIndex.isValid())
+        {
+            QList<Widget*> widgetList = qvariant_cast<QList<Widget*> >(currentIndex.model()->data(currentIndex, WidgetRole));
+            QList<QStyleOption*> optionList = qvariant_cast<QList<QStyleOption*> >(currentIndex.model()->data(currentIndex, WidgetStyleRole));
+
+            QRect origRect = d->itemView->visualRect(currentIndex);
+
+            int i = 0;
+            foreach (Widget *widget, widgetList)
+            {
+                QStyleOption *opt = optionList[i];
+                opt->rect.setTop(opt->rect.top() + origRect.top());
+                opt->rect.setBottom(opt->rect.bottom() + origRect.top());
+                opt->rect.setLeft(opt->rect.left() + origRect.left());
+                opt->rect.setRight(opt->rect.right() + origRect.left());
+
+                if (opt->rect.contains(viewport->mapFromGlobal(QCursor::pos())))
+                {
+                    PushButton *pushButton = qobject_cast<PushButton*>(widget);
+
+                    if (pushButton)
+                    {
+                        pushButton->d->emitClicked(currentIndex);
+                    }
+                }
+
+                i++;
+            }
+        }
+    }
+
+    return false;
+}
+
+
+}
+
+#include "goya.moc"
Index: kdeui/goya/tests/main.cpp
===================================================================
--- kdeui/goya/tests/main.cpp	(revisión: 0)
+++ kdeui/goya/tests/main.cpp	(revisión: 0)
@@ -0,0 +1,151 @@
+#include "goya.h"
+
+#include <kdebug.h>
+
+#include <QWidget>
+#include <QPainter>
+#include <QListView>
+#include <QBoxLayout>
+#include <QApplication>
+#include <QStringListModel>
+
+class MiModel
+    : public QStringListModel
+{
+    Q_OBJECT
+
+public:
+    MiModel(QAbstractItemView *itemView, QObject *parent = 0)
+        : QStringListModel(parent)
+        , itemView(itemView)
+    {
+        button = new Goya::PushButton();
+        button2 = new Goya::PushButton();
+
+        button2->setEatEvents(true);
+
+        connect(button, SIGNAL(clicked(QModelIndex)), this, SLOT(slotClicked1(QModelIndex)));
+        connect(button2, SIGNAL(clicked(QModelIndex)), this, SLOT(slotClicked2(QModelIndex)));
+    }
+
+    virtual ~MiModel()
+    {
+    }
+
+    QVariant data(const QModelIndex &index, int role) const
+    {
+        if (role == Goya::WidgetStyleRole)
+        {
+            QStyleOptionButton *opt = new QStyleOptionButton();
+            opt->initFrom(itemView);
+            opt->rect = QRect(25, 25, 200, 50);
+            opt->text = QString("Left button test ") + QString::number(index.row() + 1);
+
+            QStyleOptionButton *opt2 = new QStyleOptionButton();
+            opt2->initFrom(itemView);
+            opt2->rect = QRect(250, 25, 200, 50);
+            opt2->text = QString("Right button test ") + QString::number(index.row() + 1);
+
+            if (index.row() % 2)
+            {
+                return QVariant::fromValue(QList<QStyleOption*>() << opt << opt2);
+            }
+
+            return QVariant::fromValue(QList<QStyleOption*>() << opt2);
+        }
+        else if (role == Goya::WidgetRole)
+        {
+            if (index.row() % 2)
+            {
+                return QVariant::fromValue(QList<Goya::Widget*>() << button << button2);
+            }
+
+            return QVariant::fromValue(QList<Goya::Widget*>() << button2);
+        }
+
+        return QStringListModel::data(index, role);
+    }
+
+private:
+    Goya::PushButton *button;
+    Goya::PushButton *button2;
+    QAbstractItemView *itemView;
+
+private Q_SLOTS:
+    void slotClicked1(const QModelIndex &index)
+    {
+        qDebug() << "GOYA LEFT BUTTON CLICKED ON INDEX ROW " << index.row() << endl;
+    }
+
+    void slotClicked2(const QModelIndex &index)
+    {
+        qDebug() << "GOYA RIGHT BUTTON CLICKED ON INDEX ROW " << index.row() << endl;
+    }
+};
+
+class MiDelegate
+    : public Goya::Canvas
+{
+public:
+    MiDelegate(QAbstractItemView *itemView, QObject *parent = 0)
+        : Canvas(itemView, parent)
+    {
+    }
+
+    virtual ~MiDelegate()
+    {
+    }
+
+    void paint(QPainter *painter, const QStyleOptionViewItem &option,
+               const QModelIndex &index) const
+    {
+        if (option.state & QStyle::State_Selected)
+        {
+            painter->fillRect(option.rect, option.palette.highlight());
+        }
+
+        Canvas::paint(painter, option, index);
+    }
+
+    QSize sizeHint(const QStyleOptionViewItem &option,
+                   const QModelIndex &index) const
+    {
+        Q_UNUSED(index);
+
+        return QSize(100, 100);
+    }
+};
+
+int main(int argc, char **argv)
+{
+    QApplication app(argc, argv);
+
+    QWidget *widget = new QWidget();
+    QVBoxLayout *layout = new QVBoxLayout;
+
+    widget->setLayout(layout);
+    widget->resize(800, 600);
+
+    QListView *listView = new QListView();
+    MiDelegate *delegate = new MiDelegate(listView);
+    MiModel *model = new MiModel(listView);
+
+    model->insertColumn(0);
+    for (int i = 0; i < 50; ++i)
+    {
+        model->insertRow(i);
+        model->setData(model->index(i, 0), QString::number(i));
+    }
+
+    listView->setModel(model);
+    listView->setItemDelegate(delegate);
+    listView->setVerticalScrollMode(QListView::ScrollPerPixel);
+
+    layout->addWidget(listView);
+
+    widget->show();
+
+    return app.exec();
+}
+
+#include "main.moc"
Index: kdeui/goya/tests/CMakeLists.txt
===================================================================
--- kdeui/goya/tests/CMakeLists.txt	(revisión: 0)
+++ kdeui/goya/tests/CMakeLists.txt	(revisión: 0)
@@ -0,0 +1,15 @@
+set( EXECUTABLE_OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR} )
+# This can be used for finding data files in the source dir, without installing them
+project(goyatest)
+
+include_directories( ${CMAKE_CURRENT_SOURCE_DIR}/.. )
+
+########### goyatest ###############
+
+set(goyatest_SRCS main.cpp )
+
+kde4_add_executable(goyatest TEST ${goyatest_SRCS})
+
+target_link_libraries(goyatest ${KDE4_KDEUI_LIBS})
+
+########### install files ###############
Index: kdeui/goya/goya.h
===================================================================
--- kdeui/goya/goya.h	(revisión: 0)
+++ kdeui/goya/goya.h	(revisión: 0)
@@ -0,0 +1,136 @@
+/**
+  * This file is part of the KDE project
+  * Copyright (C) 2007 Rafael Fernández López <ereslibre@kde.org>
+  *
+  * This library is free software; you can redistribute it and/or
+  * modify it under the terms of the GNU Library General Public
+  * License as published by the Free Software Foundation; either
+  * version 2 of the License, or (at your option) any later version.
+  *
+  * This library is distributed in the hope that it will be useful,
+  * but WITHOUT ANY WARRANTY; without even the implied warranty of
+  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+  * Library General Public License for more details.
+  *
+  * You should have received a copy of the GNU Library General Public License
+  * along with this library; see the file COPYING.LIB.  If not, write to
+  * the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
+  * Boston, MA 02110-1301, USA.
+  */
+
+#ifndef GOYA_H
+#define GOYA_H
+
+#include <QList>
+#include <QObject>
+#include <QModelIndex>
+#include <QItemDelegate>
+
+#include <kdeui_export.h>
+
+class QPainter;
+class QStyleOption;
+class QStyleOptionViewItem;
+class QAbstractItemView;
+
+namespace Goya
+{
+
+
+enum AdditionalRoles {
+    WidgetStyleRole = 0x07EC5EC6,
+    WidgetRole      = 0x0606CBD5
+};
+
+
+/**
+  * Generic Widget
+  */
+class KDEUI_EXPORT Widget
+    : public QObject
+{
+    friend class Canvas;
+
+public:
+    Widget(QObject *parent = 0);
+    virtual ~Widget();
+
+    bool eatEvents() const;
+    void setEatEvents(bool eatEvents);
+
+    QRectF rect() const;
+    void setRect(const QRectF &rect);
+
+    const QAbstractItemView *itemView() const;
+
+    virtual void paint(const QStyleOption *option, QPainter *painter) const = 0;
+
+private:
+    class Private;
+    Private *const d;
+};
+
+
+/**
+  * Push Button Widget
+  */
+class KDEUI_EXPORT PushButton
+    : public Widget
+{
+    friend class Canvas;
+
+    Q_OBJECT
+
+public:
+    PushButton(QObject *parent = 0);
+    virtual ~PushButton();
+
+    QString &text() const;
+    void setText(const QString &text);
+
+    QIcon &icon() const;
+    void setIcon(const QIcon &icon);
+
+    QSize &iconSize() const;
+    void setIconSize(const QSize &iconSize);
+
+    virtual void paint(const QStyleOption *option, QPainter *painter) const;
+
+Q_SIGNALS:
+    void clicked(const QModelIndex &index);
+
+private:
+    class Private;
+    Private *const d;
+};
+
+
+/**
+  * Canvas
+  */
+class KDEUI_EXPORT Canvas
+    : public QAbstractItemDelegate
+{
+public:
+    Canvas(QAbstractItemView *itemView, QObject *parent = 0);
+    virtual ~Canvas();
+
+    // Reimplemented from QItemDelegate
+    void paint(QPainter *painter, const QStyleOptionViewItem &option,
+               const QModelIndex &index) const;
+
+protected:
+    virtual bool eventFilter(QObject *watched, QEvent *event);
+
+private:
+    class Private;
+    Private *const d;
+};
+
+
+}
+
+Q_DECLARE_METATYPE(QList<Goya::Widget*>)
+Q_DECLARE_METATYPE(QList<QStyleOption*>)
+
+#endif // GOYA_H
Index: kdeui/itemviews/kcategorizedsortfilterproxymodel.h
===================================================================
--- kdeui/itemviews/kcategorizedsortfilterproxymodel.h	(revisión: 731485)
+++ kdeui/itemviews/kcategorizedsortfilterproxymodel.h	(copia de trabajo)
@@ -32,7 +32,30 @@ class QItemSelection;
   * This class replaces the original QSortFilterProxyModel for the
   * KCategorizedView class usage.
   *
-  * @author Rafael Fernández López
+  * The main importance of this class is that it is able to sort items in a
+  * different way than the common one (the way QSortFilterProxyModel does). If
+  * isCategorizedModel() is true, items will be sorted by categories. Otherwise,
+  * items as sorted as QSortFilterProxyModel does.
+  *
+  * When isCategorizedModel() is true what this class does for asking the
+  * category of each item is to ask the source model this way:
+  * sourceModel()->data(theAskedIndex, KCategorizedSortFilterProxyModel::CategoryRole);
+  *
+  * You will also need to reimplement two pure virtual methods in order to have a
+  * categorized view:
+  * - lessThanCategoryPurpose: sets the way items are sorted on a category. Usually
+  *                            this call forwards to lessThan() directly.
+  * - lessThanGeneralPurpose: sets the way categories are sorted in the view.
+  *
+  * Please take in count that lessThan methods are lessThan, not lessThanOrEqual,
+  * so if two indexes can be considered equal, you should return false.
+  *
+  * For this reason, if you want your items to be able to be categorized you need to:
+  * - Return the category for asked indexes with the role KCategorizedSortFilterProxyModel::CategoryRole.
+  * - Reimplement lessThanCategoryPurpose.
+  * - Reimplement lessThanGeneralPurpose.
+  *
+  * @author Rafael Fernández López <ereslibre@kde.org>
   */
 class KDEUI_EXPORT KCategorizedSortFilterProxyModel
     : public QSortFilterProxyModel
@@ -45,50 +68,208 @@ public:
     enum AdditionalRoles {
         // Note: use printf "0x%08X\n" $(($RANDOM*$RANDOM))
         // to define additional roles.
-        CategoryRole = 0x17CE990A
+        CategoryRole = 0x17CE990A ///< The category that the item is in
     };
 
     KCategorizedSortFilterProxyModel(QObject *parent = 0);
     virtual ~KCategorizedSortFilterProxyModel();
 
+    /**
+      * Sets the source model from where the indexes will be mapped
+      *
+      * @param sourceModel the source model from where we want to map indexes
+      */
     virtual void setSourceModel(QAbstractItemModel *sourceModel);
 
+    /**
+      * Actually sort by column @p column and order @p order
+      *
+      * @param column the column that will be taken for the sorting
+      * @param order the order of the sorting
+      */
     virtual void sort(int column, Qt::SortOrder order = Qt::AscendingOrder);
 
+    /**
+      * Maps an index from the source model to the proxy model
+      *
+      * @param sourceIndex the index in the source model to be mapped to the proxy model
+      * @return the index @p sourceIndex mapped to the proxy model. An invalid index if @p sourceIndex has been filtered on the proxy model
+      */
     virtual QModelIndex mapFromSource(const QModelIndex &sourceIndex) const;
+
+    /**
+      * Maps an index from proxy model to the source model
+      *
+      * @param proxyIndex the index in the proxy model to be mapped to the source model
+      * @return the index @p proxyIndex mapped to the source model
+      */
     virtual QModelIndex mapToSource(const QModelIndex &proxyIndex) const;
+
+    /**
+      * Maps an entire selection from the source model to the proxy model
+      *
+      * @param sourceSelection the selection in the source model
+      * @return the selection @p sourceSelection mapped to the proxy model
+      */
     virtual QItemSelection mapSelectionFromSource(const QItemSelection &sourceSelection) const;
+
+    /**
+      * Maps an entire selection from the proxy model to the source model
+      *
+      * @param proxySelection the selection in the proxy model
+      * @return the selection @p proxySelection mapped to the source model
+      */
     virtual QItemSelection mapSelectionToSource(const QItemSelection &proxySelection) const;
 
+    /**
+      * @return the regular expression used for filter indexes
+      */
     virtual QRegExp filterRegExp() const;
+
+    /**
+      * Sets the regular expression used for filtering
+      *
+      * @param regExp the regular expression to be used
+      */
     virtual void setFilterRegExp(const QRegExp &regExp);
+
+    /**
+      * Sets the pattern used for filtering
+      *
+      * @param pattern the pattern to be used
+      */
     virtual void setFilterRegExp(const QString &pattern);
 
+    /**
+      * @return the column used for filtering
+      */
     virtual int filterKeyColumn() const;
+
+    /**
+      * Sets the column used for filtering
+      *
+      * @param column the column to be used
+      */
     virtual void setFilterKeyColumn(int column);
 
+    /**
+      * @return whether the filter is case aware or not when filtering
+      */
     virtual Qt::CaseSensitivity filterCaseSensitivity() const;
+
+    /**
+      * Sets the filter case sensitivity
+      *
+      * @param cs the case sensitivity to be used
+      */
     virtual void setFilterCaseSensitivity(Qt::CaseSensitivity cs);
 
+    /**
+      * @return whether the filter is case aware or not when sorting
+      */
     virtual Qt::CaseSensitivity sortCaseSensitivity() const;
+
+    /**
+      * Sets the sorting case sensitivity
+      *
+      * @param cs the case sensitivity to be used
+      */
     virtual void setSortCaseSensitivity(Qt::CaseSensitivity cs);
 
+    /**
+      * @return whether the sorting is locale aware or not
+      */
     virtual bool isSortLocaleAware() const;
+
+    /**
+      * Sets if the sorting is locale aware or not
+      *
+      * @param on if the sorting is locale aware or not
+      */
     virtual void setSortLocaleAware(bool on);
 
+    /**
+      * @return whether the sorting/filtering is dynamic, that means that the model
+      *         reacts automatically (sorting/filtering) when the source model changes
+      */
     virtual bool dynamicSortFilter() const;
+
+    /**
+      * Sets if the proxy model should sort/filter again when the source model suffer changes
+      *
+      * @param enable if the proxy model should sort/filter again when the source model suffer changes
+      */
     virtual void setDynamicSortFilter(bool enable);
 
+    /**
+      * @return the role used for sorting purposes
+      */
     virtual int sortRole() const;
+
+    /**
+      * Sets the role used for sorting purposes
+      *
+      * @param role role used for sorting purposes
+      */
     virtual void setSortRole(int role);
 
+    /**
+      * @return the role used for filtering purposes
+      */
     virtual int filterRole() const;
+
+    /**
+      * Sets the role used for filtering purposes
+      *
+      * @param role role used for filtering purposes
+      */
     virtual void setFilterRole(int role);
 
+    /**
+      * Returns an index for the given @p row, @p column and @p parent. If no such
+      * combination of row, column or parent exists, an invalid index is returned
+      *
+      * @param row the row of the index
+      * @param column the column of the index
+      * @param parent the parent of the index
+      *
+      * @return a valid index if @p row, @p column and @p parent were correctly given.
+      *         An invalid index otherwise.
+      *
+      * @warning you can not use this returned index directly with the source model,
+      *          for that, please use mapToSource and mapFromSource methods
+      */
     virtual QModelIndex index(int row, int column, const QModelIndex &parent = QModelIndex()) const;
+
+    /**
+      * Asks to @p parent if it has any children or not
+      *
+      * @param parent the parent node to be asked for children
+      *
+      * @return whether @p parent has children or not
+      */
     virtual bool hasChildren(const QModelIndex &parent = QModelIndex()) const;
 
+    /**
+      * Returns a variant for the given @p index and @p role
+      *
+      * @param index the index to be asked for information
+      * @param role the role we want to know about
+      *
+      * @return a valid variant if @p index and @p role are correctly given and are
+      *         valid data. An invalid variant otherwise
+      */
     virtual QVariant data(const QModelIndex &index, int role = Qt::DisplayRole) const;
+
+    /**
+      * Sets the data of index @p index on role @p role to value @p value
+      *
+      * @param index the index to be set information
+      * @param value the value we want to set to @p index at @p role
+      * @param role the role we want set information
+      *
+      * @return whether the operation finished successfully or not
+      */
     virtual bool setData(const QModelIndex &index, const QVariant &value, int role = Qt::EditRole);
 
     virtual QVariant headerData(int section, Qt::Orientation orientation, int role = Qt::EditRole) const;
