Index: src/dolphinsortfilterproxymodel.cpp
===================================================================
--- src/dolphinsortfilterproxymodel.cpp	(revisión: 673361)
+++ src/dolphinsortfilterproxymodel.cpp	(copia de trabajo)
@@ -87,6 +87,7 @@ void DolphinSortFilterProxyModel::sort(i
     m_sorting = (column >= 0) && (column < dolphinMapSize) ?
                 dirModelColumnToDolphinView[column]  :
                 DolphinView::SortByName;
+    setSortRole(column);
     QSortFilterProxyModel::sort(column, sortOrder);
 }
 
@@ -118,7 +119,8 @@ bool DolphinSortFilterProxyModel::lessTh
     QVariant leftData  = dirModel->data(left,  sortRole());
     QVariant rightData = dirModel->data(right, sortRole());
 
-    if ((leftData.type() == QVariant::String) && (rightData.type() == QVariant::String)) {
+    /*if ((leftData.type() == QVariant::String) && (rightData.type() ==
+QVariant::String)) {
         // assure that directories are always sorted before files
         // if the sorting is done by the 'Name' column
         if (m_sortColumn == KDirModel::Name) {
@@ -138,10 +140,11 @@ bool DolphinSortFilterProxyModel::lessTh
 
         return sortCaseSensitivity() ? (naturalCompare(leftStr, rightStr) < 0) :
                (naturalCompare(leftStr.toLower(), rightStr.toLower()) < 0);
-    }
+    }*/
 
     // We have set a SortRole and trust the ProxyModel to do
     // the right thing for now.
+    return leftData.toString().toLower() < rightData.toString().toLower();
     return QSortFilterProxyModel::lessThan(left, right);
 }
 
Index: src/klistview.cpp
===================================================================
--- src/klistview.cpp	(revisión: 673361)
+++ src/klistview.cpp	(copia de trabajo)
@@ -18,25 +18,30 @@
   * Boston, MA 02110-1301, USA.
   */
 
-// NOTE: rectForIndex() not virtual on QListView !! relevant ?
 #include "klistview.h"
 #include "klistview_p.h"
 
-#include <QtGui/QPainter>
-#include <QtGui/QScrollBar>
-#include <QtGui/QKeyEvent>
-#include <QtGui/QSortFilterProxyModel>
+#include <math.h> // trunc
+
+#include <QApplication>
+#include <QPainter>
+#include <QScrollBar>
+#include <QPaintEvent>
+#include <QSortFilterProxyModel>
 
 #include <kdebug.h>
+#include <kstyle.h>
 
 #include "kitemcategorizer.h"
 
 KListView::Private::Private(KListView *listView)
     : listView(listView)
     , modelSortCapable(false)
-    , itemCategorizer(0)
     , numCategories(0)
+    , itemCategorizer(0)
     , proxyModel(0)
+    , originalModel(0)
+    , mouseButtonPressed(false)
 {
 }
 
@@ -44,22 +49,205 @@ KListView::Private::~Private()
 {
 }
 
-QModelIndexList KListView::Private::intersectionSet(const QRect &rect) const
+const QModelIndexList &KListView::Private::intersectionSet(const QRect &rect)
 {
     // FIXME: boost me, I suck (ereslibre)
 
-    QModelIndexList modelIndexList;
+    intersectedIndexes.clear();
 
     QModelIndex index;
-    for (int i = 0; i < listView->model()->rowCount(); i++)
+    for (int i = 0; i < proxyModel->rowCount(); i++)
     {
-        index = listView->model()->index(i, 0);
+        index = proxyModel->index(i, 0);
 
         if (rect.intersects(listView->visualRect(index)))
-            modelIndexList.append(index);
+            intersectedIndexes.append(index);
     }
 
-    return modelIndexList;
+    return intersectedIndexes;
+}
+
+QRect KListView::Private::visualRectInViewport(const QModelIndex &index) const
+{
+    // FIXME: right to left languages (ereslibre)
+    // FIXME: drag & drop support (ereslibre)
+    // FIXME: do not forget to remove itemWidth's hard-coded values that were
+    //        only for testing purposes. We might like to calculate the best
+    //        width, but what we would really like for sure is that all items
+    //        have the same width, as well as the same height (ereslibre)
+
+    if (!index.isValid())
+        return QRect();
+
+    QModelIndex mappedIndex = proxyModel->mapToSource(index);
+
+    QRect retRect(listView->spacing(), listView->spacing() * 2 +
+                       listView->categoryHeight(listView->viewOptions()), 0, 0);
+
+    int viewportWidth = listView->viewport()->width() - listView->spacing();
+
+    int itemHeight = 107; // NOTE: ghosts in here !
+    int itemWidth = 130; // NOTE: ghosts in here !
+    int itemWidthPlusSeparation = listView->spacing() + itemWidth;
+    int elementsPerRow = viewportWidth / itemWidthPlusSeparation;
+    if (!elementsPerRow)
+        elementsPerRow++;
+
+    QModelIndex itIndex;
+    QString curCategory = listView->itemCategorizer()->categoryForItem(mappedIndex,
+                                                        proxyModel->sortRole());
+
+    int column = (index.row() - firstIndexInCategory[curCategory]) %
+                                                                 elementsPerRow;
+
+    int row = (index.row() - firstIndexInCategory[curCategory]) /
+                                                                 elementsPerRow;
+
+    retRect.setLeft(retRect.left() + column * listView->spacing() +
+                    column * itemWidth);
+
+    int firstTempIndexInCategory;
+    float rows;
+    int rowsInt;
+    foreach (const QString &category, categories)
+    {
+        firstTempIndexInCategory = firstIndexInCategory[category];
+        rows = (float) ((float) elementsPerCategory[category] /
+                        (float) elementsPerRow);
+        rowsInt = elementsPerCategory[category] / elementsPerRow;
+
+        if (rows - trunc(rows)) rowsInt++;
+
+        if (firstTempIndexInCategory < firstIndexInCategory[curCategory])
+        {
+            retRect.setTop(retRect.top() +
+                           (rowsInt * listView->spacing()) +
+                           (rowsInt * itemHeight) +
+                           listView->categoryHeight(listView->viewOptions()) +
+                           listView->spacing() * 2);
+        }
+    }
+
+    retRect.setTop(retRect.top() + row * listView->spacing() +
+                   row * itemHeight);
+
+    retRect.setWidth(itemWidth);
+    retRect.setHeight(itemHeight);
+
+    return retRect;
+}
+
+QRect KListView::Private::visualCategoryRectInViewport(const QString &category)
+                                                                           const
+{
+    QRect retRect(listView->spacing(),
+                  listView->spacing(),
+                  listView->viewport()->width() - listView->spacing() * 2,
+                  0);
+
+    if (!proxyModel->rowCount() || !categories.contains(category))
+        return QRect();
+
+    QModelIndex index = proxyModel->index(0, 0, QModelIndex());
+
+    int viewportWidth = listView->viewport()->width() - listView->spacing();
+
+    int itemHeight = /*listView->sizeHintForIndex(index).height()*/ 107;
+    int itemWidth = 130; // NOTE: ghosts in here !
+    int itemWidthPlusSeparation = listView->spacing() + itemWidth;
+    int elementsPerRow = viewportWidth / itemWidthPlusSeparation;
+
+    if (!elementsPerRow)
+        elementsPerRow++;
+
+    float rows;
+    int rowsInt;
+    foreach (const QString &itCategory, categories)
+    {
+        if (firstIndexInCategory[itCategory] <
+            firstIndexInCategory[category])
+        {
+            rows = (float) ((float) elementsPerCategory[itCategory] /
+                            (float) elementsPerRow);
+            rowsInt = elementsPerCategory[itCategory] / elementsPerRow;
+
+            if (rows - trunc(rows)) rowsInt++;
+
+            retRect.setTop(retRect.top() +
+                           (rowsInt * listView->spacing()) +
+                           (rowsInt * itemHeight) +
+                           listView->categoryHeight(listView->viewOptions()) +
+                           listView->spacing() * 2);
+        }
+    }
+
+    retRect.setHeight(listView->categoryHeight(listView->viewOptions()));
+
+    return retRect;
+}
+
+// We're sure elementsPosition doesn't contain index
+const QRect &KListView::Private::cacheIndex(const QModelIndex &index)
+{
+    QRect rect = visualRectInViewport(index);
+    elementsPosition.insert(index, rect);
+
+    return elementsPosition[index];
+}
+
+const QRect &KListView::Private::cachedRectIndex(const QModelIndex &index)
+{
+    if (elementsPosition.contains(index)) // If we have it cached
+    {
+        return elementsPosition[index];   // return it
+    }
+    else
+    {
+        kDebug() << "Item with index " << index.row() << " has been cached" << endl;
+
+        return cacheIndex(index);         // Otherwise, cache it and return it
+    }
+}
+
+// We're sure categoriesPosition doesn't contain category
+const QRect &KListView::Private::cacheCategory(const QString &category)
+{
+    QRect rect = visualCategoryRectInViewport(category);
+    categoriesPosition.insert(category, rect);
+
+    return categoriesPosition[category];
+}
+
+const QRect &KListView::Private::cachedRectCategory(const QString &category)
+{
+    if (categoriesPosition.contains(category)) // If we have it cached
+    {
+        return categoriesPosition[category];   // return it
+    }
+    else
+    {
+        return cacheCategory(category);        // Otherwise, cache it and
+    }                                          // return it
+}
+
+QRect KListView::Private::visualRect(const QModelIndex &index)
+{
+    QRect retRect = cachedRectIndex(index);
+    int dx = -listView->horizontalOffset();
+    int dy = -listView->verticalOffset();
+    retRect.adjust(dx, dy, dx, dy);
+
+    return retRect;
+}
+
+QRect KListView::Private::categoryVisualRect(const QString &category)
+{
+    QRect retRect = cachedRectCategory(category);
+    int dx = -listView->horizontalOffset();
+    int dy = -listView->verticalOffset();
+    retRect.adjust(dx, dy, dx, dy);
+
+    return retRect;
 }
 
 KListView::KListView(QWidget *parent)
@@ -70,12 +258,6 @@ KListView::KListView(QWidget *parent)
 
 KListView::~KListView()
 {
-    if (d->proxyModel)
-    {
-        QObject::disconnect(this->model(), SIGNAL(layoutChanged()),
-                            this         , SLOT(itemsLayoutChanged()));
-    }
-
     delete d;
 }
 
@@ -84,105 +266,86 @@ void KListView::setModel(QAbstractItemMo
     QSortFilterProxyModel *proxyModel =
                                     qobject_cast<QSortFilterProxyModel*>(model);
 
-    if (this->model() && this->model()->rowCount())
+    d->originalModel = model;
+
+    d->categories.clear();
+    d->elementsPerCategory.clear();
+    d->firstIndexInCategory.clear();
+    d->elementsPosition.clear();
+    d->categoriesPosition.clear();
+
+    if (d->proxyModel)
     {
-        QObject::disconnect(this->model(), SIGNAL(layoutChanged()),
+        QObject::disconnect(d->proxyModel, SIGNAL(layoutChanged()),
                             this         , SLOT(itemsLayoutChanged()));
 
+        QObject::disconnect(d->proxyModel, SIGNAL(rowsRemoved(QModelIndex,
+                                                              int,
+                                                              int)),
+                            this         , SLOT(rowsRemoved(QModelIndex,
+                                                            int,
+                                                            int)));
+
+        if (d->proxyModel->rowCount())
+        {
         rowsAboutToBeRemovedArtifficial(QModelIndex(), 0,
-                                        this->model()->rowCount() - 1);
+                                            d->proxyModel->rowCount() - 1);
+        }
     }
 
     d->modelSortCapable = (proxyModel != 0);
     d->proxyModel = proxyModel;
 
-    // If the model was initialized before applying to the view, we update
-    // internal data structure of the view with the model information
-    if (model->rowCount())
-    {
-        rowsInsertedArtifficial(QModelIndex(), 0, model->rowCount() - 1);
-    }
-
     QListView::setModel(model);
 
+    if (d->modelSortCapable)
+    {
     QObject::connect(model, SIGNAL(layoutChanged()),
                      this , SLOT(itemsLayoutChanged()));
+
+        QObject::connect(d->proxyModel, SIGNAL(rowsRemoved(QModelIndex,
+                                                           int,
+                                                           int)),
+                         this         , SLOT(rowsRemoved(QModelIndex,
+                                                         int,
+                                                         int)));
+    }
 }
 
 QRect KListView::visualRect(const QModelIndex &index) const
 {
-    // FIXME: right to left languages (ereslibre)
-    // FIXME: drag & drop support (ereslibre)
-    // FIXME: do not forget to remove itemWidth's hard-coded values that were
-    //        only for testing purposes. We might like to calculate the best
-    //        width, but what we would really like for sure is that all items
-    //        have the same width, as well as the same height (ereslibre)
+    const QSortFilterProxyModel *model = qobject_cast<const QSortFilterProxyModel*>(index.model());
 
     if ((viewMode() == KListView::ListMode) || !d->modelSortCapable ||
-        !d->itemCategorizer)
+        !d->itemCategorizer || !model)
     {
         return QListView::visualRect(index);
     }
 
-    QRect retRect(spacing(), spacing(), 0, 0);
-    int viewportWidth = viewport()->width() - spacing();
-    int dx = -horizontalOffset();
-    int dy = -verticalOffset();
-
-    if (verticalScrollBar() && !verticalScrollBar()->isHidden())
-        viewportWidth -= verticalScrollBar()->width();
-
-    int itemHeight = sizeHintForIndex(index).height();
-    int itemWidth = 130; // NOTE: ghosts in here !
-    int itemWidthPlusSeparation = spacing() + itemWidth;
-    int elementsPerRow = viewportWidth / itemWidthPlusSeparation;
-    if (!elementsPerRow)
-        elementsPerRow++;
-    QModelIndex currentIndex = d->proxyModel->index(index.row(), 0);
-    QString itemCategory = d->itemCategorizer->categoryForItem(currentIndex,
-                                                     d->proxyModel->sortRole());
-    int naturalRow = index.row() / elementsPerRow;
-    int naturalTop = naturalRow * itemHeight + naturalRow * spacing();
-
-    int rowsForCategory;
-    int lastIndexShown = -1;
-    foreach (QString category, d->categories)
-    {
-        retRect.setTop(retRect.top() + spacing());
+    QRect retRect;
 
-        if (category == itemCategory)
+    if (d->elementsPosition.contains(index))
         {
-            break;
+        retRect = d->elementsPosition[index];
         }
-
-        rowsForCategory = (d->elementsPerCategory[category] / elementsPerRow);
-
-        if ((d->elementsPerCategory[category] % elementsPerRow) ||
-            !rowsForCategory)
+    else
         {
-            rowsForCategory++;
+        retRect = d->visualRectInViewport(index);
         }
 
-        lastIndexShown += d->elementsPerCategory[category];
-
-        retRect.setTop(retRect.top() + categoryHeight(viewOptions()) +
-                       (rowsForCategory * spacing() * 2) +
-                       (rowsForCategory * itemHeight));
-    }
-
-    int rowToPosition = (index.row() - (lastIndexShown + 1)) / elementsPerRow;
-    int columnToPosition = (index.row() - (lastIndexShown + 1)) %
-                                                                 elementsPerRow;
-
-    retRect.setTop(retRect.top() + (rowToPosition * spacing() * 2) +
-                   (rowToPosition * itemHeight));
 
-    retRect.setLeft(retRect.left() + (columnToPosition * spacing()) +
-                    (columnToPosition * itemWidth));
+    int dx = -horizontalOffset();
+    int dy = -verticalOffset();
+    retRect.adjust(dx, dy, dx, dy);
 
-    retRect.setWidth(130); // NOTE: ghosts in here !
-    retRect.setHeight(itemHeight);
+    return retRect;
+}
 
+QRect KListView::visualCategoryRect(const QString &category) const
+{
+    QRect retRect = d->cachedRectCategory(category);
+    int dx = -horizontalOffset();
+    int dy = -verticalOffset();
     retRect.adjust(dx, dy, dx, dy);
 
     return retRect;
@@ -197,8 +360,14 @@ void KListView::setItemCategorizer(KItem
 {
     d->itemCategorizer = itemCategorizer;
 
-    if (itemCategorizer)
+    if (d->originalModel)
+    {
+        rowsAboutToBeRemovedArtifficial(QModelIndex(), 0, d->originalModel->rowCount() - 1);
+        rowsInsertedArtifficial(QModelIndex(), 0, d->originalModel->rowCount() - 1);
         itemsLayoutChanged();
+    }
+
+    viewport()->update();
 }
 
 QModelIndex KListView::indexAt(const QPoint &point) const
@@ -221,33 +390,71 @@ QModelIndex KListView::indexAt(const QPo
     return index;
 }
 
-int KListView::sizeHintForRow(int row) const
+void KListView::drawNewCategory(const QString &category,
+                                const QStyleOption &option,
+                                QPainter *painter)
 {
-    if ((viewMode() == KListView::ListMode) || !d->modelSortCapable ||
-        !d->itemCategorizer)
-    {
-        return QListView::sizeHintForRow(row);
-    }
+    QColor color = option.palette.color(QPalette::Text);
 
-    QModelIndex index = d->proxyModel->index(0, 0);
+    painter->save();
+    painter->setRenderHint(QPainter::Antialiasing);
 
-    if (!index.isValid())
-        return 0;
+    QStyleOptionButton opt;
 
-    return sizeHintForIndex(index).height() + categoryHeight(viewOptions()) +
-           spacing();
-}
+    opt.rect = option.rect;
+    opt.palette = option.palette;
+    opt.direction = option.direction;
+    opt.text = category;
 
-void KListView::drawNewCategory(const QString &category,
-                                const QStyleOptionViewItem &option,
-                                QPainter *painter)
-{
-    painter->drawText(option.rect.topLeft(), category);
+    if (option.rect.contains(viewport()->mapFromGlobal(QCursor::pos())) &&
+        !d->mouseButtonPressed)
+    {
+        const QPalette::ColorGroup group = option.state & QStyle::State_Enabled ?
+                                           QPalette::Normal : QPalette::Disabled;
+
+        painter->fillRect(option.rect, option.palette.color(group, QPalette::Highlight).light());
+    }
+
+    /*if (const KStyle *style = dynamic_cast<const KStyle*>(QApplication::style()))
+    {
+        style->drawControl(KStyle::CE_Category, &opt, painter, this);
+    }
+    else
+    {*/
+        QFont painterFont = painter->font();
+        painterFont.setWeight(QFont::Bold);
+        QFontMetrics metrics(painterFont);
+        painter->setFont(painterFont);
+
+        QPainterPath path;
+        path.addRect(option.rect.left(),
+                     option.rect.bottom() - 2,
+                     option.rect.width(),
+                     2);
+
+        QLinearGradient gradient(option.rect.topLeft(),
+                                                     option.rect.bottomRight());
+        gradient.setColorAt(0, color);
+        gradient.setColorAt(1, Qt::transparent);
+
+        painter->setBrush(gradient);
+        painter->fillPath(path, gradient);
+
+        painter->setPen(color);
+
+        painter->drawText(option.rect, Qt::AlignVCenter | Qt::AlignLeft,
+                          category);
+    //}
+    painter->restore();
 }
 
 int KListView::categoryHeight(const QStyleOptionViewItem &option) const
 {
-    return option.fontMetrics.height();
+    QFont painterFont = option.font;
+    painterFont.setWeight(QFont::Bold);
+    QFontMetrics metrics(painterFont);
+
+    return metrics.height() + spacing() + 1;
 }
 
 void KListView::paintEvent(QPaintEvent *event)
@@ -270,14 +477,15 @@ void KListView::paintEvent(QPaintEvent *
     const QStyle::State state = option.state;
     const bool enabled = (state & QStyle::State_Enabled) != 0;
 
-    int totalHeight = 0;
-    QModelIndex index;
-    QString prevCategory;
+    painter.save();
+
+    QRect rectInViewPort;
     QModelIndexList dirtyIndexes = d->intersectionSet(area);
     foreach (const QModelIndex &index, dirtyIndexes)
     {
         option.state = state;
-        option.rect = visualRect(index);
+        option.rect = d->visualRect(index);
+
         if (selectionModel() && selectionModel()->isSelected(index))
             option.state |= QStyle::State_Selected;
         if (enabled)
@@ -301,30 +509,72 @@ void KListView::paintEvent(QPaintEvent *
                 option.state |= QStyle::State_Editing;
         }
 
-        if (index == d->hovered)
+        if ((index == d->hovered) && !d->mouseButtonPressed)
             option.state |= QStyle::State_MouseOver;
         else
             option.state &= ~QStyle::State_MouseOver;
 
-        if (prevCategory != d->itemCategorizer->categoryForItem(index,
-                                                     d->proxyModel->sortRole()))
+        itemDelegate(index)->paint(&painter, option, index);
+    }
+
+    // Redraw categories
+    QStyleOptionViewItem otherOption;
+    foreach (const QString &category, d->categories)
         {
-            prevCategory = d->itemCategorizer->categoryForItem(index,
-                                                     d->proxyModel->sortRole());
-            drawNewCategory(prevCategory, option, &painter);
+        otherOption = option;
+        otherOption.rect = visualCategoryRect(category);
+
+        drawNewCategory(category, otherOption, &painter);
         }
-        itemDelegate(index)->paint(&painter, option, index);
+
+    if (d->mouseButtonPressed)
+    {
+        QPoint start, end, initialPressPosition;
+
+        initialPressPosition = d->initialPressPosition;
+
+        initialPressPosition.setY(initialPressPosition.y() - verticalOffset());
+        initialPressPosition.setX(initialPressPosition.x() - horizontalOffset());
+
+        if (d->initialPressPosition.x() > d->mousePosition.x() ||
+            d->initialPressPosition.y() > d->mousePosition.y())
+        {
+            start = d->mousePosition;
+            end = initialPressPosition;
+        }
+        else
+        {
+            start = initialPressPosition;
+            end = d->mousePosition;
     }
+
+        QStyleOption yetAnotherOption;
+        yetAnotherOption.rect = QRect(start, end);
+        QApplication::style()->drawControl(QStyle::CE_RubberBand, &yetAnotherOption, &painter);
+    }
+
+    painter.restore();
 }
 
-void KListView::setSelection(const QRect &rect,
-                             QItemSelectionModel::SelectionFlags flags)
+void KListView::resizeEvent(QResizeEvent *event)
 {
-    // TODO: implement me
+    if ((viewMode() == KListView::ListMode) || !d->modelSortCapable ||
+        !d->itemCategorizer)
+    {
+        QListView::resizeEvent(event);
+        return;
+    }
 
-    QListView::setSelection(rect, flags);
+    d->elementsPosition.clear();
+    d->categoriesPosition.clear();
 
-    /*if ((viewMode() == KListView::ListMode) || !d->modelSortCapable ||
+    itemsLayoutChanged();
+}
+
+void KListView::setSelection(const QRect &rect,
+                             QItemSelectionModel::SelectionFlags flags)
+{
+    if ((viewMode() == KListView::ListMode) || !d->modelSortCapable ||
         !d->itemCategorizer)
     {
         QListView::setSelection(rect, flags);
@@ -335,28 +585,107 @@ void KListView::setSelection(const QRect
     for (int i = 0; i < d->proxyModel->rowCount(); i++)
     {
         index = d->proxyModel->index(i, 0);
-        if (rect.intersects(visualRect(index)))
+        if (!d->mouseButtonPressed && rect.intersects(visualRect(index)))
+        {
+            selectionModel()->select(index, flags);
+        }
+        else if (rect.intersects(visualRect(index)))
         {
             selectionModel()->select(index, QItemSelectionModel::Select);
+            d->tempSelected.append(index);
         }
-        else
+        else if ((d->mouseButtonPressed) && d->tempSelected.contains(index))
         {
             selectionModel()->select(index, QItemSelectionModel::Deselect);
+            d->tempSelected.removeAll(index);
+        }
+    }
+}
+
+void KListView::mouseMoveEvent(QMouseEvent *event)
+{
+    QListView::mouseMoveEvent(event);
+
+    if ((viewMode() == KListView::ListMode) || !d->modelSortCapable ||
+        !d->itemCategorizer)
+    {
+        return;
+    }
+
+    d->mousePosition = event->pos();
+
+    viewport()->update();
+}
+
+void KListView::mousePressEvent(QMouseEvent *event)
+{
+    QListView::mousePressEvent(event);
+
+    if ((viewMode() == KListView::ListMode) || !d->modelSortCapable ||
+        !d->itemCategorizer)
+    {
+        return;
         }
-    }*/
 
-    //selectionModel()->select(selection, flags);
+    d->tempSelected.clear();
+
+    d->initialPressPosition = event->pos();
+
+    d->initialPressPosition.setY(d->initialPressPosition.y() + verticalOffset());
+    d->initialPressPosition.setX(d->initialPressPosition.x() + horizontalOffset());
+
+    if (event->button() == Qt::LeftButton)
+        d->mouseButtonPressed = true;
+
+    viewport()->update();
 }
 
-void KListView::timerEvent(QTimerEvent *event)
+void KListView::mouseReleaseEvent(QMouseEvent *event)
 {
-    QListView::timerEvent(event);
+    QListView::mouseReleaseEvent(event);
 
     if ((viewMode() == KListView::ListMode) || !d->modelSortCapable ||
         !d->itemCategorizer)
     {
         return;
     }
+
+    d->mouseButtonPressed = false;
+
+    QPoint initialPressPosition = viewport()->mapFromGlobal(QCursor::pos());
+    initialPressPosition.setY(initialPressPosition.y() + verticalOffset());
+    initialPressPosition.setX(initialPressPosition.x() + horizontalOffset());
+
+    if (initialPressPosition == d->initialPressPosition)
+    {
+        foreach(const QString &category, d->categories)
+        {
+            if (d->categoryVisualRect(category).contains(event->pos()))
+            {
+                QModelIndex index;
+                QItemSelectionModel::SelectionFlag flag;
+                for (int i = d->firstIndexInCategory[category];
+                     i < d->firstIndexInCategory[category] + d->elementsPerCategory[category];
+                     i++)
+                {
+                    index = d->proxyModel->index(i, 0);
+
+                    if (selectionModel()->selectedIndexes().contains(index))
+                    {
+                        flag = QItemSelectionModel::Deselect;
+                    }
+                    else
+                    {
+                        flag = QItemSelectionModel::Select;
+                    }
+
+                    selectionModel()->select(index, flag);
+                }
+            }
+        }
+    }
+
+    viewport()->update();
 }
 
 void KListView::rowsInserted(const QModelIndex &parent,
@@ -364,15 +693,42 @@ void KListView::rowsInserted(const QMode
                              int end)
 {
     QListView::rowsInserted(parent, start, end);
+
+    if ((viewMode() == KListView::ListMode) || !d->modelSortCapable ||
+        !d->itemCategorizer)
+    {
+        return;
+    }
+
     rowsInsertedArtifficial(parent, start, end);
 }
 
+void KListView::rowsRemoved(const QModelIndex &parent,
+                            int start,
+                            int end)
+{
+    Q_UNUSED(end);
+
+    if ((viewMode() == KListView::ListMode) || !d->modelSortCapable ||
+        !d->itemCategorizer)
+    {
+        return;
+    }
+
+    // TODO: update d->firstIndexInCategory
+}
+
 void KListView::rowsAboutToBeRemoved(const QModelIndex &parent,
                                      int start,
                                      int end)
 {
-    QListView::rowsAboutToBeRemoved(parent, start, end);
+    if ((viewMode() != KListView::ListMode) && d->modelSortCapable &&
+        d->itemCategorizer)
+    {
     rowsAboutToBeRemovedArtifficial(parent, start, end);
+    }
+
+    QListView::rowsAboutToBeRemoved(parent, start, end);
 }
 
 void KListView::rowsInsertedArtifficial(const QModelIndex &parent,
@@ -387,20 +743,35 @@ void KListView::rowsInsertedArtifficial(
 
     QString category;
     QModelIndex index;
+    QModelIndex origIndex;
     for (int i = start; i <= end; i++)
     {
-        index = d->proxyModel->index(i, 0, parent);
+        origIndex = d->proxyModel->index(i, 0, parent);
+        index = d->proxyModel->mapToSource(origIndex);
         category = d->itemCategorizer->categoryForItem(index,
                                                      d->proxyModel->sortRole());
 
+        // Update categories
         if (d->elementsPerCategory.contains(category))
+        {
             d->elementsPerCategory[category]++;
+
+            if (d->firstIndexInCategory.contains(category) &&
+                origIndex.row() < d->firstIndexInCategory[category])
+                d->firstIndexInCategory[category] = origIndex.row();
+        }
         else
         {
             d->elementsPerCategory.insert(category, 1);
             d->categories.append(category);
+            if (!d->firstIndexInCategory.contains(category))
+                d->firstIndexInCategory.insert(category, origIndex.row());
+            else
+                d->firstIndexInCategory[category] = origIndex.row();
         }
     }
+
+    viewport()->update();
 }
 
 void KListView::rowsAboutToBeRemovedArtifficial(const QModelIndex &parent,
@@ -417,12 +788,17 @@ void KListView::rowsAboutToBeRemovedArti
 
     QString category;
     QModelIndex index;
+    QModelIndex origIndex;
     for (int i = start; i <= end; i++)
     {
-        index = d->proxyModel->index(i, 0, parent);
+        origIndex = d->proxyModel->index(i, 0, parent);
+        index = d->proxyModel->mapToSource(origIndex);
         category = d->itemCategorizer->categoryForItem(index,
                                                      d->proxyModel->sortRole());
 
+        if (d->elementsPosition.contains(origIndex))
+            d->elementsPosition.remove(origIndex);
+
         if (d->elementsPerCategory.contains(category))
         {
             d->elementsPerCategory[category]--;
@@ -431,19 +807,35 @@ void KListView::rowsAboutToBeRemovedArti
             {
                 d->elementsPerCategory.remove(category);
                 d->categories.removeAll(category);
+                if (d->categoriesPosition.contains(category))
+                    d->categoriesPosition.remove(category);
+                d->firstIndexInCategory.remove(category);
+            }
             }
         }
+
+    if (!d->proxyModel->rowCount())
+    {
+        d->elementsPerCategory.clear();
+        d->elementsPosition.clear();
+        d->elementsPerCategory.clear();
+        d->firstIndexInCategory.clear();
+        d->categories.clear();
     }
+
+    viewport()->update();
 }
 
 void KListView::itemsLayoutChanged()
 {
-    d->elementsPerCategory.clear();
-    d->categories.clear();
+    if ((viewMode() == KListView::ListMode) || !d->modelSortCapable ||
+        !d->itemCategorizer)
+    {
+        return;
+    }
 
-    if (d->proxyModel && d->proxyModel->rowCount())
-        rowsInsertedArtifficial(QModelIndex(), 0,
-                                                 d->proxyModel->rowCount() - 1);
+    int lastItemBottom = visualRect(d->proxyModel->index(d->proxyModel->rowCount() - 1, 0)).bottom() + spacing() - viewport()->height();
+    verticalScrollBar()->setRange(0, lastItemBottom);
 }
 
 #include "klistview.moc"
Index: src/dolphiniconsview.cpp
===================================================================
--- src/dolphiniconsview.cpp	(revisión: 673361)
+++ src/dolphiniconsview.cpp	(copia de trabajo)
@@ -38,7 +38,7 @@ DolphinIconsView::DolphinIconsView(QWidg
     Q_ASSERT(controller != 0);
     setViewMode(QListView::IconMode);
     setResizeMode(QListView::Adjust);
-
+    setSpacing(10);
     setMouseTracking(true);
     viewport()->setAttribute(Qt::WA_Hover);
 
Index: src/CMakeLists.txt
===================================================================
--- src/CMakeLists.txt	(revisión: 673361)
+++ src/CMakeLists.txt	(copia de trabajo)
@@ -7,6 +7,10 @@ include_directories( ${CMAKE_SOURCE_DIR}
 
 add_definitions (-DQT3_SUPPORT)
 
+#include_directories( ${CMAKE_SOURCE_DIR}/workspace/plasma/lib )
+
+#include_directories( ${CMAKE_SOURCE_DIR}/workspace/plasma/lib )
+
 ########### next target ###############
 
 set(dolphinprivate_LIB_SRCS
Index: src/klistview_p.h
===================================================================
--- src/klistview_p.h	(revisión: 673361)
+++ src/klistview_p.h	(copia de trabajo)
@@ -29,16 +29,33 @@ public:
     Private(KListView *listView);
     ~Private();
 
-    QModelIndexList intersectionSet(const QRect &rect) const;
+    const QModelIndexList &intersectionSet(const QRect &rect);
+    QRect visualRectInViewport(const QModelIndex &index) const;
+    QRect visualCategoryRectInViewport(const QString &category) const;
+    const QRect &cacheIndex(const QModelIndex &index);
+    const QRect &cachedRectIndex(const QModelIndex &index);
+    const QRect &cacheCategory(const QString &category);
+    const QRect &cachedRectCategory(const QString &category);
+    QRect visualRect(const QModelIndex &index);
+    QRect categoryVisualRect(const QString &category);
 
     KListView *listView;
     QModelIndex hovered;
+    QModelIndexList tempSelected;
     bool modelSortCapable;
     int numCategories;
     QList<QString> categories;
     QHash<QString, int> elementsPerCategory;
+    QHash<QString, int> firstIndexInCategory;
+    QHash<QModelIndex, QRect> elementsPosition;
+    QHash<QString, QRect> categoriesPosition;
+    QModelIndexList intersectedIndexes;
     KItemCategorizer *itemCategorizer;
     QSortFilterProxyModel *proxyModel;
+    QAbstractItemModel *originalModel;
+    bool mouseButtonPressed;
+    QPoint initialPressPosition;
+    QPoint mousePosition;
 };
 
 #endif // __KLISTVIEW_P_H__
Index: src/dolphinitemcategorizer.cpp
===================================================================
--- src/dolphinitemcategorizer.cpp	(revisión: 673361)
+++ src/dolphinitemcategorizer.cpp	(copia de trabajo)
@@ -41,29 +41,51 @@ QString DolphinItemCategorizer::category
 {
     QString retString;
 
-    if (!index.isValid()) {
+    if (!index.isValid())
+    {
+        return retString;
+    }
+
+    int indexColumn;
+
+    switch (sortRole)
+    {
+        case DolphinView::SortByName:
+            indexColumn = KDirModel::Name;
+            break;
+        case DolphinView::SortBySize:
+            indexColumn = KDirModel::Size;
+            break;
+        default:
         return retString;
     }
 
     // KDirModel checks columns to know to which role are
     // we talking about
     QModelIndex theIndex = index.model()->index(index.row(),
-                           sortRole,
+                                                indexColumn,
                            index.parent());
 
-    const QSortFilterProxyModel* proxyModel = static_cast<const QSortFilterProxyModel*>(index.model());
-    const KDirModel* dirModel = static_cast<const KDirModel*>(proxyModel->sourceModel());
+    if (!theIndex.isValid()) {
+        return retString;
+    }
 
     QVariant data = theIndex.model()->data(theIndex, Qt::DisplayRole);
 
-    QModelIndex mappedIndex = proxyModel->mapToSource(theIndex);
-    KFileItem* item = dirModel->itemForIndex(mappedIndex);
+    //KFileItem* item = dirModel->itemForIndex(index);
 
-    switch (sortRole) {
+    switch (sortRole)
+    {
     case DolphinView::SortByName:
+            if (data.toString().size())
+            {
+                if (data.toString().at(0).isLetter())
         retString = data.toString().toUpper().at(0);
+                else
+                    retString = i18n("Others");
+            }
         break;
-    case DolphinView::SortBySize:
+        /*case DolphinView::SortBySize:
         int fileSize = (item) ? item->size() : -1;
         if (item && item->isDir()) {
             retString = i18n("Unknown");
@@ -74,7 +96,7 @@ QString DolphinItemCategorizer::category
         } else {
             retString = i18n("Big");
         }
-        break;
+            break;*/
     }
 
     return retString;
Index: src/klistview.h
===================================================================
--- src/klistview.h	(revisión: 673361)
+++ src/klistview.h	(copia de trabajo)
@@ -41,28 +41,33 @@ public:
 
     QRect visualRect(const QModelIndex &index) const;
 
+    QRect visualCategoryRect(const QString &category) const;
+
     KItemCategorizer *itemCategorizer() const;
 
     void setItemCategorizer(KItemCategorizer *itemCategorizer);
 
     virtual QModelIndex indexAt(const QPoint &point) const;
 
-    virtual int sizeHintForRow(int row) const;
-
-
 protected:
     virtual void drawNewCategory(const QString &category,
-                                 const QStyleOptionViewItem &option,
+                                 const QStyleOption &option,
                                  QPainter *painter);
 
     virtual int categoryHeight(const QStyleOptionViewItem &option) const;
 
     virtual void paintEvent(QPaintEvent *event);
 
+    virtual void resizeEvent(QResizeEvent *event);
+
     virtual void setSelection(const QRect &rect,
                               QItemSelectionModel::SelectionFlags flags);
 
-    virtual void timerEvent(QTimerEvent *event);
+    virtual void mouseMoveEvent(QMouseEvent *event);
+
+    virtual void mousePressEvent(QMouseEvent *event);
+
+    virtual void mouseReleaseEvent(QMouseEvent *event);
 
 
 protected Q_SLOTS:
@@ -70,6 +75,10 @@ protected Q_SLOTS:
                               int start,
                               int end);
 
+    virtual void rowsRemoved(const QModelIndex &parent,
+                             int start,
+                             int end);
+
     virtual void rowsAboutToBeRemoved(const QModelIndex &parent,
                                       int start,
                                       int end);
