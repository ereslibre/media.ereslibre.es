Index: workspace/libs/plasma/phase.cpp
===================================================================
--- workspace/libs/plasma/phase.cpp	(revisión: 772275)
+++ workspace/libs/plasma/phase.cpp	(copia de trabajo)
@@ -26,6 +26,7 @@
 #include <KConfigGroup>
 #include <KService>
 #include <KServiceTypeTrader>
+#include <KGlobalSettings>
 
 #include "animator.h"
 #include "widgets/widget.h"
@@ -88,10 +89,12 @@ class Phase::Private
 {
     public:
 
-        Private()
-            : animator(0),
+        Private(Phase *q)
+            : q(q),
+              animator(0),
               animId(0),
-              timerId(0)
+              timerId(0),
+              animationsEnabled(KGlobalSettings::animationsEnabled())
         {
         }
 
@@ -114,6 +117,10 @@ class Phase::Private
 
         qreal calculateProgress(int frames, int currentFrame)
         {
+            if (!animationsEnabled) {
+                return qreal(1.0);
+            }
+
             qreal progress = frames;
             progress = currentFrame / progress;
             progress = qMin(qreal(1.0), qMax(qreal(0.0), progress));
@@ -153,10 +160,23 @@ class Phase::Private
                     break;
             }
         }
+
+        void _k_slotSettingsChanged(int category)
+        {
+            Q_UNUSED(category);
+
+            animationsEnabled = KGlobalSettings::animationsEnabled();
+        }
+
+        Phase* q;
         Animator* animator;
         int animId;
         int timerId;
         QTime time;
+        // Caching this property prevents us from asking KGlobalSettings very
+        // repeatedly. We need to update this property when KGlobalSettings notifies
+        // a certain change on the current settings. (ereslibre)
+        bool animationsEnabled;
 
         //TODO: eventually perhaps we should allow multiple animations simulataneously
         //      which would imply changing this to a QMap<QGraphicsItem*, QList<QTimeLine*> >
@@ -183,8 +203,10 @@ Phase* Phase::self()
 
 Phase::Phase(QObject * parent)
     : QObject(parent),
-      d(new Private)
+      d(new Private(this))
 {
+    connect(KGlobalSettings::self(), SIGNAL(settingsChanged(int)), this, SLOT(_k_slotSettingsChanged(int)));
+
     init();
 }
 
@@ -456,7 +478,7 @@ void Phase::timerEvent(QTimerEvent *even
     foreach (AnimationState* state, d->animatedItems) {
         if (state->currentInterval <= elapsed) {
             // we need to step forward!
-            state->currentFrame += qMax(1, elapsed / state->interval);
+            state->currentFrame += d->animationsEnabled ? qMax(1, elapsed / state->interval) : state->frames - state->currentFrame;
 
             if (state->currentFrame < state->frames) {
                 qreal progress = d->calculateProgress(state->frames, state->currentFrame);
@@ -480,7 +502,7 @@ void Phase::timerEvent(QTimerEvent *even
     foreach (MovementState* state, d->movingItems) {
         if (state->currentInterval <= elapsed) {
             // we need to step forward!
-            state->currentFrame += qMax(1, elapsed / state->interval);
+            state->currentFrame += d->animationsEnabled ? qMax(1, elapsed / state->interval) : state->frames - state->currentFrame;
 
             if (state->currentFrame < state->frames) {
                 d->performMovement(d->calculateProgress(state->frames, state->currentFrame), state);
@@ -514,7 +536,7 @@ void Phase::timerEvent(QTimerEvent *even
             /*kDebug() << "stepping forwards element anim " << state->id << " from " << state->currentFrame
                     << " by " << qMax(1, elapsed / state->interval) << " to "
                     << state->currentFrame + qMax(1, elapsed / state->interval) << endl;*/
-            state->currentFrame += qMax(1, elapsed / state->interval);
+            state->currentFrame += d->animationsEnabled ? qMax(1, elapsed / state->interval) : state->frames - state->currentFrame;
             // nasty hack because QGraphicsItem::update isn't virtual!
             // FIXME: remove in 4.1 as we will no longer need the caching in Plasma::Widget with Qt 4.4
             Plasma::Widget *widget = dynamic_cast<Plasma::Widget*>(state->item);
@@ -539,7 +561,7 @@ void Phase::timerEvent(QTimerEvent *even
     foreach (CustomAnimationState *state, d->customAnims) {
         if (state->currentInterval <= elapsed) {
             // advance the frame
-            state->currentFrame += qMax(1, elapsed / state->interval);
+            state->currentFrame += d->animationsEnabled ? qMax(1, elapsed / state->interval) : state->frames - state->currentFrame;
             /*kDebug() << "custom anim for" << state->receiver << "to slot" << state->slot
                      << "with interval of" << state->interval << "at frame" << state->currentFrame;*/
 
Index: workspace/libs/plasma/phase.h
===================================================================
--- workspace/libs/plasma/phase.h	(revisión: 772275)
+++ workspace/libs/plasma/phase.h	(copia de trabajo)
@@ -132,6 +132,8 @@ private:
 
     class Private;
     Private * const d;
+
+    Q_PRIVATE_SLOT( d, void _k_slotSettingsChanged( int category ) )
 };
 
 } // namespace Plasma
