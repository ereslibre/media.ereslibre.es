Index: workspace/libs/plasma/phase.cpp
===================================================================
--- workspace/libs/plasma/phase.cpp	(revisión: 772275)
+++ workspace/libs/plasma/phase.cpp	(copia de trabajo)
@@ -26,6 +26,7 @@
 #include <KConfigGroup>
 #include <KService>
 #include <KServiceTypeTrader>
+#include <KGlobalSettings>
 
 #include "animator.h"
 #include "widgets/widget.h"
@@ -88,10 +89,12 @@ class Phase::Private
 {
     public:
 
-        Private()
-            : animator(0),
+        Private(Phase *q)
+            : q(q),
+              animator(0),
               animId(0),
-              timerId(0)
+              timerId(0),
+              animationsEnabled(KGlobalSettings::animationsEnabled())
         {
         }
 
@@ -153,10 +156,28 @@ class Phase::Private
                     break;
             }
         }
+
+        void _k_slotSettingsChanged(int category)
+        {
+            Q_UNUSED(category);
+
+            animationsEnabled = KGlobalSettings::animationsEnabled();
+
+            delete animator;
+            animator = 0;
+
+            q->init();
+        }
+
+        Phase* q;
         Animator* animator;
         int animId;
         int timerId;
         QTime time;
+        // Caching this property prevents us from asking KGlobalSettings very
+        // repeatedly. We need to update this property when KGlobalSettings notifies
+        // a certain change on the current settings. (ereslibre)
+        bool animationsEnabled;
 
         //TODO: eventually perhaps we should allow multiple animations simulataneously
         //      which would imply changing this to a QMap<QGraphicsItem*, QList<QTimeLine*> >
@@ -183,8 +204,10 @@ Phase* Phase::self()
 
 Phase::Phase(QObject * parent)
     : QObject(parent),
-      d(new Private)
+      d(new Private(this))
 {
+    connect(KGlobalSettings::self(), SIGNAL(settingsChanged(int)), this, SLOT(_k_slotSettingsChanged(int)));
+
     init();
 }
 
@@ -572,6 +595,7 @@ void Phase::timerEvent(QTimerEvent *even
 
 void Phase::init()
 {
+    if (d->animationsEnabled) {
     KConfig c("plasmarc");
     KConfigGroup cg(&c, "Phase");
     QString pluginName = cg.readEntry("animator", "default");
@@ -588,6 +612,7 @@ void Phase::init()
             }
         }
     }
+    }
 
     if (!d->animator) {
         d->animator = new Animator(this);
Index: workspace/libs/plasma/phase.h
===================================================================
--- workspace/libs/plasma/phase.h	(revisión: 772275)
+++ workspace/libs/plasma/phase.h	(copia de trabajo)
@@ -132,6 +132,8 @@ private:
 
     class Private;
     Private * const d;
+
+    Q_PRIVATE_SLOT( d, void _k_slotSettingsChanged( int category ) )
 };
 
 } // namespace Plasma
