diff --git a/kdeui/widgets/kcapacitybar.cpp b/kdeui/widgets/kcapacitybar.cpp
index fc7fd26..dfb42dc 100644
--- a/kdeui/widgets/kcapacitybar.cpp
+++ b/kdeui/widgets/kcapacitybar.cpp
@@ -34,8 +34,8 @@
 
 #include <kcolorscheme.h>
 
-#define ROUND_MARGIN     10
-#define VERTICAL_SPACING  1
+#define ROUND_MARGIN     6
+#define VERTICAL_SPACING 1
 
 class KCapacityBar::Private
 {
diff --git a/kfile/kfileplacesview.cpp b/kfile/kfileplacesview.cpp
index f81e402..94b1469 100644
--- a/kfile/kfileplacesview.cpp
+++ b/kfile/kfileplacesview.cpp
@@ -23,8 +23,9 @@
 #include <QtCore/QTimer>
 #include <QtGui/QMenu>
 #include <QtGui/QPainter>
-#include <QtGui/QStyledItemDelegate>
+#include <QtGui/QAbstractItemDelegate>
 #include <QtGui/QKeyEvent>
+#include <QtGui/QApplication>
 
 #include <kdebug.h>
 
@@ -38,6 +39,8 @@
 #include <kio/job.h>
 #include <kio/jobuidelegate.h>
 #include <kjob.h>
+#include <kcapacitybar.h>
+#include <kdiskfreespaceinfo.h>
 #include <solid/storageaccess.h>
 #include <solid/storagedrive.h>
 #include <solid/storagevolume.h>
@@ -47,7 +50,64 @@
 #include "kfileplaceeditdialog.h"
 #include "kfileplacesmodel.h"
 
-class KFilePlacesViewDelegate : public QStyledItemDelegate
+#define LATERAL_MARGIN 4
+#define CAPACITYBAR_HEIGHT 6
+
+class KFilePlacesView::Private
+{
+public:
+    Private(KFilePlacesView *parent) : q(parent) { }
+    
+    enum FadeType {
+        FadeIn = 0,
+        FadeOut
+    };
+
+    KFilePlacesView * const q;
+
+    KUrl currentUrl;
+    bool autoResizeItems;
+    bool showAll;
+    bool smoothItemResizing;
+    bool dropOnPlace;
+    bool dragging;
+    Solid::StorageAccess *lastClickedStorage;
+    QPersistentModelIndex lastClickedIndex;
+    QPersistentModelIndex lastHoveredIndex;
+    
+    QMap<QPersistentModelIndex, QTimeLine*> timeLineMap;
+    QMap<QTimeLine*, QPersistentModelIndex> timeLineInverseMap;
+
+    QRect dropRect;
+
+    void setCurrentIndex(const QModelIndex &index);
+    void adaptItemSize();
+    void updateHiddenRows();
+    bool insertAbove(const QRect &itemRect, const QPoint &pos) const;
+    bool insertBelow(const QRect &itemRect, const QPoint &pos) const;
+    int insertIndicatorHeight(int itemHeight) const;
+    void fadeCapacityBar(const QModelIndex &index, FadeType fadeType);
+    float contentsOpacity(const QModelIndex &index);
+
+    void _k_placeClicked(const QModelIndex &index);
+    void _k_placeActivated(const QModelIndex &index);
+    void _k_placeEntered(const QModelIndex &index);
+    void _k_storageSetupDone(const QModelIndex &index, bool success);
+    void _k_adaptItemsUpdate(qreal value);
+    void _k_itemAppearUpdate(qreal value);
+    void _k_itemDisappearUpdate(qreal value);
+    void _k_enableSmoothItemResizing();
+    void _k_trashUpdated(KJob *job);
+    void _k_timeLineValueChanged(qreal value);
+
+    QTimeLine adaptItemsTimeline;
+    int oldSize, endSize;
+
+    QTimeLine itemAppearTimeline;
+    QTimeLine itemDisappearTimeline;
+};
+
+class KFilePlacesViewDelegate : public QAbstractItemDelegate
 {
 public:
     KFilePlacesViewDelegate(KFilePlacesView *parent);
@@ -84,7 +144,7 @@ private:
 };
 
 KFilePlacesViewDelegate::KFilePlacesViewDelegate(KFilePlacesView *parent) :
-    QStyledItemDelegate(parent),
+    QAbstractItemDelegate(parent),
     m_view(parent),
     m_iconSize(48),
     m_appearingIconSize(0),
@@ -102,7 +162,6 @@ KFilePlacesViewDelegate::~KFilePlacesViewDelegate()
 QSize KFilePlacesViewDelegate::sizeHint(const QStyleOptionViewItem &option,
                                         const QModelIndex &index) const
 {
-    QSize size = QStyledItemDelegate::sizeHint(option, index);
     int iconSize = m_iconSize;
     if (m_appearingItems.contains(index)) {
         iconSize = m_appearingIconSize;
@@ -110,8 +169,10 @@ QSize KFilePlacesViewDelegate::sizeHint(const QStyleOptionViewItem &option,
         iconSize = m_disappearingIconSize;
     }
 
-    size.setHeight(iconSize + KDialog::marginHint());
-    return size;
+    const KFilePlacesModel *filePlacesModel = static_cast<const KFilePlacesModel*>(index.model());
+    Solid::Device device = filePlacesModel->deviceForIndex(index);
+
+    return QSize(option.rect.width(), qMax(iconSize, option.fontMetrics.height()) + KDialog::marginHint());
 }
 
 void KFilePlacesViewDelegate::paint(QPainter *painter, const QStyleOptionViewItem &option, const QModelIndex &index) const
@@ -125,11 +186,63 @@ void KFilePlacesViewDelegate::paint(QPainter *painter, const QStyleOptionViewIte
     }
 
     QStyleOptionViewItemV4 opt = option;
-    opt.decorationSize = QSize(m_iconSize, m_iconSize);
+    QApplication::style()->drawPrimitive(QStyle::PE_PanelItemViewItem, &opt, painter);
+    const KFilePlacesModel *placesModel = static_cast<const KFilePlacesModel*>(index.model());
+    bool isRemovableDevice = false;
+    Solid::Device device;
+    if (placesModel->isDevice(index)) {
+        device = placesModel->deviceForIndex(index);
+        if ((device.is<Solid::StorageAccess>() && device.as<Solid::StorageAccess>()->isAccessible() ||
+             device.parent().is<Solid::StorageAccess>() && device.parent().as<Solid::StorageAccess>()->isAccessible()) &&
+            (device.is<Solid::StorageDrive>() && device.as<Solid::StorageDrive>()->isRemovable() ||
+             device.parent().is<Solid::StorageDrive>() && device.parent().as<Solid::StorageDrive>()->isRemovable()) &&
+            (device.is<Solid::StorageDrive>() && device.as<Solid::StorageDrive>()->driveType() != Solid::StorageDrive::CdromDrive ||
+             device.parent().is<Solid::StorageDrive>() && device.parent().as<Solid::StorageDrive>()->driveType() != Solid::StorageDrive::CdromDrive)) {
+            isRemovableDevice = true;
+        }
+    }
     if (!m_showHoverIndication) {
         opt.state &= ~QStyle::State_MouseOver;
     }
-    QStyledItemDelegate::paint(painter, opt, index);
+
+    QIcon icon = index.model()->data(index, Qt::DecorationRole).value<QIcon>();
+    QPixmap pm = icon.pixmap(m_iconSize, m_iconSize);
+    QPoint point(option.rect.left() + LATERAL_MARGIN, option.rect.top() + (option.rect.height() - m_iconSize) / 2);
+    painter->drawPixmap(point, pm);
+
+    if (option.state & QStyle::State_Selected) {
+        painter->setPen(option.palette.highlightedText().color());
+    }
+
+    QRect rectText;
+    if (isRemovableDevice) {
+        painter->save();
+        painter->setOpacity(painter->opacity() * m_view->d->contentsOpacity(index));
+        
+        int height = option.fontMetrics.height() + CAPACITYBAR_HEIGHT;
+        rectText = QRect(m_iconSize + LATERAL_MARGIN * 2 + option.rect.left(), option.rect.top() + (option.rect.height() / 2 - height / 2), option.rect.width() - m_iconSize - LATERAL_MARGIN * 2, option.fontMetrics.height());
+        painter->drawText(rectText, Qt::AlignLeft | Qt::AlignTop, option.fontMetrics.elidedText(index.model()->data(index).toString(), Qt::ElideRight, rectText.width()));
+        QRect capacityRect(rectText.x(), rectText.bottom() - 1, rectText.width() - LATERAL_MARGIN, CAPACITYBAR_HEIGHT);
+        Solid::StorageAccess *storage = device.as<Solid::StorageAccess>();
+        KDiskFreeSpaceInfo info = KDiskFreeSpaceInfo::freeSpaceInfo(storage->filePath());
+        if (info.size()) {
+            KCapacityBar capacityBar(KCapacityBar::DrawTextInline);
+            capacityBar.setValue((info.used() * 100) / info.size());
+            capacityBar.drawCapacityBar(painter, capacityRect);
+        }
+        
+        painter->restore();
+        
+        painter->save();
+        painter->setOpacity(painter->opacity() * (1 - m_view->d->contentsOpacity(index)));
+    }
+
+    rectText = QRect(m_iconSize + LATERAL_MARGIN * 2 + option.rect.left(), option.rect.top(), option.rect.width() - m_iconSize - LATERAL_MARGIN * 2, option.rect.height());
+    painter->drawText(rectText, Qt::AlignLeft | Qt::AlignVCenter, option.fontMetrics.elidedText(index.model()->data(index).toString(), Qt::ElideRight, rectText.width()));
+
+    if (isRemovableDevice) {
+        painter->restore();
+    }
 
     painter->restore();
 }
@@ -199,47 +312,6 @@ void KFilePlacesViewDelegate::setShowHoverIndication(bool show)
     m_showHoverIndication = show;
 }
 
-class KFilePlacesView::Private
-{
-public:
-    Private(KFilePlacesView *parent) : q(parent) { }
-
-    KFilePlacesView * const q;
-
-    KUrl currentUrl;
-    bool autoResizeItems;
-    bool showAll;
-    bool smoothItemResizing;
-    bool dropOnPlace;
-    bool dragging;
-    Solid::StorageAccess *lastClickedStorage;
-    QPersistentModelIndex lastClickedIndex;
-
-    QRect dropRect;
-
-    void setCurrentIndex(const QModelIndex &index);
-    void adaptItemSize();
-    void updateHiddenRows();
-    bool insertAbove(const QRect &itemRect, const QPoint &pos) const;
-    bool insertBelow(const QRect &itemRect, const QPoint &pos) const;
-    int insertIndicatorHeight(int itemHeight) const;
-
-    void _k_placeClicked(const QModelIndex &index);
-    void _k_placeActivated(const QModelIndex &index);
-    void _k_storageSetupDone(const QModelIndex &index, bool success);
-    void _k_adaptItemsUpdate(qreal value);
-    void _k_itemAppearUpdate(qreal value);
-    void _k_itemDisappearUpdate(qreal value);
-    void _k_enableSmoothItemResizing();
-    void _k_trashUpdated(KJob *job);
-
-    QTimeLine adaptItemsTimeline;
-    int oldSize, endSize;
-
-    QTimeLine itemAppearTimeline;
-    QTimeLine itemDisappearTimeline;
-};
-
 KFilePlacesView::KFilePlacesView(QWidget *parent)
     : QListView(parent), d(new Private(this))
 {
@@ -255,6 +327,7 @@ KFilePlacesView::KFilePlacesView(QWidget *parent)
 
     setDragEnabled(true);
     setAcceptDrops(true);
+    setMouseTracking(true);
     setDropIndicatorShown(false);
     setFrameStyle(QFrame::NoFrame);
 
@@ -269,6 +342,8 @@ KFilePlacesView::KFilePlacesView(QWidget *parent)
             this, SLOT(_k_placeClicked(const QModelIndex&)));
     connect(this, SIGNAL(activated(const QModelIndex&)),
             this, SLOT(_k_placeActivated(const QModelIndex&)));
+    connect(this, SIGNAL(entered(const QModelIndex&)),
+            this, SLOT(_k_placeEntered(const QModelIndex&)));
 
     connect(&d->adaptItemsTimeline, SIGNAL(valueChanged(qreal)),
             this, SLOT(_k_adaptItemsUpdate(qreal)));
@@ -837,6 +912,35 @@ int KFilePlacesView::Private::insertIndicatorHeight(int itemHeight) const
     return height;
 }
 
+void KFilePlacesView::Private::fadeCapacityBar(const QModelIndex &index, FadeType fadeType)
+{
+    QTimeLine *timeLine = timeLineMap.value(index, 0);
+    delete timeLine;
+    timeLineMap.remove(index);
+    timeLineInverseMap.remove(timeLine);
+    timeLine = new QTimeLine(250, q);
+    connect(timeLine, SIGNAL(valueChanged(qreal)), q, SLOT(_k_timeLineValueChanged(qreal)));
+    if (fadeType == FadeIn) {
+        timeLine->setDirection(QTimeLine::Forward);
+        timeLine->setCurrentTime(0);
+    } else {
+        timeLine->setDirection(QTimeLine::Backward);
+        timeLine->setCurrentTime(250);
+    }
+    timeLineMap.insert(index, timeLine);
+    timeLineInverseMap.insert(timeLine, index);
+    timeLine->start();
+}
+
+float KFilePlacesView::Private::contentsOpacity(const QModelIndex &index)
+{
+    QTimeLine *timeLine = timeLineMap.value(index, 0);
+    if (timeLine) {
+        return timeLine->currentValue();
+    }
+    return 0;
+}
+
 void KFilePlacesView::Private::_k_placeClicked(const QModelIndex &index)
 {
     if (!KGlobalSettings::singleClick()) {
@@ -865,6 +969,13 @@ void KFilePlacesView::Private::_k_placeActivated(const QModelIndex &index)
     setCurrentIndex(index);
 }
 
+void KFilePlacesView::Private::_k_placeEntered(const QModelIndex &index)
+{
+    fadeCapacityBar(lastHoveredIndex, FadeOut);
+    fadeCapacityBar(index, FadeIn);
+    lastHoveredIndex = index;
+}
+
 void KFilePlacesView::Private::_k_storageSetupDone(const QModelIndex &index, bool success)
 {
     if (index!=lastClickedIndex) {
@@ -930,6 +1041,15 @@ void KFilePlacesView::Private::_k_trashUpdated(KJob *job)
     org::kde::KDirNotify::emitFilesAdded("trash:/");
 }
 
+void KFilePlacesView::Private::_k_timeLineValueChanged(qreal value)
+{
+    const QModelIndex index = timeLineInverseMap.value(static_cast<QTimeLine*>(q->sender()));
+    if (!index.isValid()) {
+        return;
+    }
+    q->update(index);
+}
+
 void KFilePlacesView::dataChanged(const QModelIndex &topLeft, const QModelIndex &bottomRight)
 {
     QListView::dataChanged(topLeft, bottomRight);
diff --git a/kfile/kfileplacesview.h b/kfile/kfileplacesview.h
index 7575a9b..a0d2393 100644
--- a/kfile/kfileplacesview.h
+++ b/kfile/kfileplacesview.h
@@ -94,16 +94,19 @@ private:
     Q_PRIVATE_SLOT(d, void adaptItemSize())
     Q_PRIVATE_SLOT(d, void _k_placeClicked(const QModelIndex &))
     Q_PRIVATE_SLOT(d, void _k_placeActivated(const QModelIndex &))
+    Q_PRIVATE_SLOT(d, void _k_placeEntered(const QModelIndex &))
     Q_PRIVATE_SLOT(d, void _k_storageSetupDone(const QModelIndex &, bool))
     Q_PRIVATE_SLOT(d, void _k_adaptItemsUpdate(qreal))
     Q_PRIVATE_SLOT(d, void _k_itemAppearUpdate(qreal))
     Q_PRIVATE_SLOT(d, void _k_itemDisappearUpdate(qreal))
     Q_PRIVATE_SLOT(d, void _k_enableSmoothItemResizing())
     Q_PRIVATE_SLOT(d, void _k_trashUpdated(KJob *))
+    Q_PRIVATE_SLOT(d, void _k_timeLineValueChanged(qreal))
 
     class Private;
     Private * const d;
     friend class Private;
+    friend class KFilePlacesViewDelegate;
 };
 
 #endif
