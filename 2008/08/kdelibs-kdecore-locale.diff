diff --git a/kdecore/localization/klocale.cpp b/kdecore/localization/klocale.cpp
index 1f1a19b..146dac3 100644
--- a/kdecore/localization/klocale.cpp
+++ b/kdecore/localization/klocale.cpp
@@ -168,6 +168,18 @@ public:
    */
   static QString fancyDate(const KLocale *locale, const QDate &date, int daysToNow);
 
+  enum DurationType {
+      DaysDurationType = 0,
+      HoursDurationType,
+      MinutesDurationType,
+      SecondsDurationType
+  };
+  /**
+   * @internal Formats a duration according to the given type and number
+   */
+  static QString formatSingleDuration( DurationType durationType, int n );
+
+
   // Numbers and money
   QString decimalSymbol;
   QString thousandsSeparator;
@@ -1223,6 +1235,48 @@ QString KLocale::formatDuration( unsigned long mSec) const
    return i18n( "%1 milliseconds", formatNumber(mSec, 0));
 }
 
+QString KLocalePrivate::formatSingleDuration( DurationType durationType, int n )
+{
+    switch (durationType) {
+        case DaysDurationType:
+            return i18ncp("@item:intext", "1 day", "%1 days", n);
+        case HoursDurationType:
+            return i18ncp("@item:intext", "1 hour", "%1 hours", n);
+        case MinutesDurationType:
+            return i18ncp("@item:intext", "1 minute", "%1 minutes", n);
+        case SecondsDurationType:
+            return i18ncp("@item:intext", "1 second", "%1 seconds", n);
+    }
+}
+
+QString KLocale::prettyFormatDuration( unsigned long mSec ) const
+{
+    unsigned long ms = mSec;
+    int days = ms/(24*3600000);
+    ms = ms%(24*3600000);
+    int hours = ms/3600000;
+    ms = ms%3600000;
+    int minutes = ms/60000;
+    ms = ms%60000;
+    int seconds = qRound(ms/1000.0);
+
+    if (days && hours) {
+        return i18nc("@item:intext days and hours. This uses the previous item:intext messages. If this does not fit the grammar of your language please contact the i18n team to solve the problem", "%1 and %2", d->formatSingleDuration(KLocalePrivate::DaysDurationType, days), d->formatSingleDuration(KLocalePrivate::HoursDurationType, hours));
+    } else if (days) {
+        return d->formatSingleDuration(KLocalePrivate::DaysDurationType, days);
+    } else if (hours && minutes) {
+        return i18nc("@item:intext hours and minutes. This uses the previous item:intext messages. If this does not fit the grammar of your language please contact the i18n team to solve the problem", "%1 and %2", d->formatSingleDuration(KLocalePrivate::HoursDurationType, hours), d->formatSingleDuration(KLocalePrivate::MinutesDurationType, minutes));
+    } else if (hours) {
+        return d->formatSingleDuration(KLocalePrivate::HoursDurationType, hours);
+    } else if (minutes && seconds) {
+        return i18nc("@item:intext minutes and seconds. This uses the previous item:intext messages. If this does not fit the grammar of your language please contact the i18n team to solve the problem", "%1 and %2", d->formatSingleDuration(KLocalePrivate::MinutesDurationType, minutes), d->formatSingleDuration(KLocalePrivate::SecondsDurationType, seconds));
+    } else if (minutes) {
+        return d->formatSingleDuration(KLocalePrivate::MinutesDurationType, minutes);
+    } else {
+        return d->formatSingleDuration(KLocalePrivate::SecondsDurationType, seconds);
+    }
+}
+
 QString KLocale::formatDate(const QDate &pDate, DateFormat format) const
 {
   if (format == FancyShortDate || format == FancyLongDate)
diff --git a/kdecore/localization/klocale.h b/kdecore/localization/klocale.h
index f25db2c..f7e9051 100644
--- a/kdecore/localization/klocale.h
+++ b/kdecore/localization/klocale.h
@@ -410,6 +410,24 @@ public:
    * @return converted duration as a string - e.g. "5.5 seconds" "23.0 minutes"
    */
   QString formatDuration( unsigned long mSec) const;
+
+  /**
+   * Given a number of milliseconds, converts that to a pretty string containing
+   * the localized equivalent. 
+   *
+   * e.g. given formatDuration(60001) returns "1 minute" 
+   *      given formatDuration(62005) returns "1 minute and 2 seconds"
+   *      given formatDuration(90060000) returns "1 day and 1 hour"
+   *
+   * @param mSec Time duration in milliseconds
+   * @return converted duration as a string.
+   *         Units not interesting to the user, for example seconds or minutes when the first
+   *         unit is day, are not returned because they are irrelevant. The same applies for seconds
+   *         when the first unit is hour.
+   * @since 4.2
+   */
+  QString prettyFormatDuration( unsigned long mSec ) const;
+
   /**
    * Use this to determine whether nouns are declined in
    * locale's language. This property should remain
diff --git a/kdeui/jobs/kwidgetjobtracker.cpp b/kdeui/jobs/kwidgetjobtracker.cpp
index da0fdb5..954b6a6 100644
--- a/kdeui/jobs/kwidgetjobtracker.cpp
+++ b/kdeui/jobs/kwidgetjobtracker.cpp
@@ -395,7 +395,7 @@ void KWidgetJobTracker::Private::ProgressWidget::speed(unsigned long value)
         if (totalSizeKnown) {
             const int remaining = 1000*(totalSize - processedSize)/value;
             speedLabel->setText(i18np("%2/s ( %3 remaining )", "%2/s ( %3 remaining )", remaining, speedStr,
-                                     KGlobal::locale()->formatDuration(remaining)));
+                                     KGlobal::locale()->prettyFormatDuration(remaining)));
         } else { // total size is not known (#24228)
             speedLabel->setText(i18nc("speed in bytes per second", "%1/s", speedStr));
         }
